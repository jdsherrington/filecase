// web/src/routes/__root.tsx

/*
This __root.tsx file defines the root layout for the entire web application, acting as the
foundational shell for all pages. Its purpose is to establish the main HTML structure
(<html>, <head>, <body>), which is necessary for providing a consistent user interface and
centralizing global concerns. It handles application-wide elements such as the main
navigation bar, global stylesheets, default SEO metadata, and context providers like
Clerk for authentication. In the context of TanStack Router's file-based routing, this
component is the top-level parent, and all other page components are rendered inside its
<Outlet />, ensuring a unified structure for the application.
*/

import { ClerkProvider, useAuth } from "@clerk/tanstack-react-start";
import { shadcn } from "@clerk/themes";
import { ThemeProvider } from "../components/theme-provider";
import {
  HeadContent, // A component that renders the metadata defined in the route's `head` option.
  Link, // A component for client-side navigation, similar to an `<a>` tag but for SPAs.
  Outlet, // A placeholder component where child routes will be rendered.
  Scripts, // A component that injects the necessary JavaScript files into the document.
  createRootRoute, // A function to define the configuration for the top-level route of the application.
} from "@tanstack/react-router";
import { TanStackRouterDevtools } from "@tanstack/react-router-devtools";
import * as React from "react";
import { DefaultCatchBoundary } from "~/components/DefaultCatchBoundary";
import { NotFound } from "~/components/NotFound";
import appCss from "~/styles/app.css?url";
import { seo } from "~/utils/seo";
import {
  QueryClient,
  QueryClientProvider,
  useMutation,
  useQuery,
} from "@tanstack/react-query";
import { CompleteProfileDialog } from "~/components/CompleteProfileDialog";
import { api } from "~/api";

// Defines a TypeScript interface for the router's context. This allows type-safe access to shared data, like authentication status, across routes.
interface MyRouterContext {
  auth: ReturnType<typeof useAuth>; // The context will contain authentication data provided by the `useAuth` hook from Clerk.
}

const queryClient = new QueryClient();

// Exports the route configuration, created using TanStack Router's `createRootRoute` function. This is how the file-based router discovers this root layout.
export const Route = createRootRoute<MyRouterContext>({
  // Configures the content of the document's `<head>` tag for SEO and resource linking.
  head: () => ({
    // Defines an array of <meta> tags to be included in the document head.
    meta: [
      {
        charSet: "utf-8", // Sets the character encoding for the document to UTF-8.
      },
      {
        name: "viewport", // Configures the viewport for responsive design on mobile devices.
        content: "width=device-width, initial-scale=1",
      },
      // Uses the spread operator (...) to include meta tags generated by the `seo` utility function.
      ...seo({
        title:
          "TanStack Start | Type-Safe, Client-First, Full-Stack React Framework",
        description: `TanStack Start is a type-safe, client-first, full-stack React framework. `,
      }),
    ],
    // Defines an array of <link> tags for stylesheets and favicons.
    links: [
      { rel: "stylesheet", href: appCss }, // Links the main application stylesheet.
      {
        rel: "apple-touch-icon", // Icon for Apple devices when added to the home screen.
        sizes: "180x180",
        href: "/apple-touch-icon.png",
      },
      {
        rel: "icon", // Favicon for browsers.
        type: "image/png",
        sizes: "32x32",
        href: "/favicon-32x32.png",
      },
      {
        rel: "icon",
        type: "image/png",
        sizes: "16x16",
        href: "/favicon-16x16.png",
      },
      { rel: "manifest", href: "/site.webmanifest", color: "#fffff" }, // Link to the web app manifest file.
      { rel: "icon", href: "/favicon.ico" }, // Fallback favicon.
    ],
  }),
  // Specifies the component to render when an error is caught in any child route.
  errorComponent: (props) => (
    // It reuses the main document structure to ensure errors are displayed within a consistent layout.
    <RootDocument>
      {/* Renders the custom error boundary component, passing along error details. */}
      <DefaultCatchBoundary {...props} />
    </RootDocument>
  ),
  // Specifies the component to render when no route matches the URL (a 404 Not Found error).
  notFoundComponent: () => <NotFound />,
  // Specifies the main React component that will be rendered for this root route's layout.
  component: RootComponent,
});

function RootComponent() {
  return (
    <QueryClientProvider client={queryClient}>
      <ThemeProvider defaultTheme="system" storageKey="ui-theme">
        <ClerkProvider
          appearance={{
            baseTheme: shadcn,
          }}
        >
          <AppWithAuth />
        </ClerkProvider>
      </ThemeProvider>
    </QueryClientProvider>
  );
}

function AppWithAuth() {
  const { isSignedIn } = useAuth();
  const { data: user, refetch } = useQuery({
    queryKey: ["user", "me"],
    queryFn: api.users.getMe,
    enabled: !!isSignedIn,
  });

  const { mutate } = useMutation({
    mutationFn: api.users.updateMe,
    onSuccess: () => {
      refetch();
    },
  });

  const [isProfileDialogOpen, setIsProfileDialogOpen] = React.useState(false);

  React.useEffect(() => {
    if (isSignedIn && user && (!user.firstName || !user.lastName)) {
      setIsProfileDialogOpen(true);
    } else {
      setIsProfileDialogOpen(false);
    }
  }, [user, isSignedIn]);

  return (
    <RootDocument>
      <Outlet />
      <CompleteProfileDialog
        open={isProfileDialogOpen}
        onOpenChange={setIsProfileDialogOpen}
        onSubmit={mutate}
      />
    </RootDocument>
  );
}

// This component defines the actual DOM structure (the HTML) for the entire application.
function RootDocument({ children }: { children: React.ReactNode }) {
  // It returns JSX that forms the complete HTML page.
  return (
    // The root HTML element of the page.
    <html>
      {/* The head section of the HTML document. */}
      <head>
        <HeadContent />
        <script
          dangerouslySetInnerHTML={{
            __html: `
                    const theme = (() => {
                      const storedTheme = localStorage.getItem('ui-theme');
                      if (storedTheme) return storedTheme;
                      return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
                    })();
                    document.documentElement.classList.add(theme);
                  `,
          }}
        />
      </head>
      {/* The body section of the HTML document. */}
      <body>
        {/* This renders the child content passed into this component, which is the page content from the <Outlet />. */}
        {children}
        {/* Includes the TanStack Router Devtools component for debugging, positioned at the bottom-right of the screen. */}
        <TanStackRouterDevtools position="bottom-right" />
        {/* A special component from TanStack Router that injects the necessary <script> tags for the application to run on the client side. */}
        <Scripts />
      </body>
    </html>
  );
}
